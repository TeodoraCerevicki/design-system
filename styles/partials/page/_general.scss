@use '../../modules/variables' as vars;
@use '../../modules/components/spacing/padding';
@use 'sass:map';

.main-content {
    padding-bottom: vars.$gap-xl;
}

.main-header {
    @include padding.vertical(vars.$gap-large);

    &_title {
        font-size: 34px;
    }
}

.section {
    border-bottom: 1px solid vars.$primary;
}

.section, .inner-section {
    @include padding.vertical(vars.$gap-large);
}

.list {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
	gap: vars.$gap-default;
	justify-items: center; 
	margin-top: vars.$gap-default;

	.box {
		width: 100%; 
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 32px;
		box-sizing: border-box;
		color: vars.$font-color-light;
		font-weight: 600;
	}

    .-font-color-light {
        color: vars.$font-color;
    }
}

$parameters: (
	primary: (colour: vars.$primary),
	primary-light: (colour: vars.$primary-light),

	accent: (colour: vars.$accent),
	accent-light: (colour: vars.$accent-light),
	accent-dark: (colour: vars.$accent-dark),

    font-color: (colour: vars.$font-color),
    font-color-light: (colour: vars.$font-color-light),

    warn: (colour: vars.$warn),

    disabled: (colour: vars.$disabled),
);
  
 @mixin generate() {
	@each $parameter, $prop in $parameters {
		$colour: map.get($prop, colour);

		#{'.-' + $parameter } {
			background-color: $colour;
            &::before {
                content: '$#{$parameter}';
            }
			&::after {
                content: '#{$colour}';
				margin-top: vars.$gap-small
            }
        }
    }
}

@include generate();